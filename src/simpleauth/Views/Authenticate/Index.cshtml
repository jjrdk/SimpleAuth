@{
    Layout = "~/Views/Shared/_Layout.cshtml";
    ViewBag.Title = "Authenticate";
    var loginState = ViewData.ModelState["Login"];
    var passwordState = ViewData.ModelState["Password"];
}
@using System.Linq;
@model SimpleAuth.ViewModels.AuthorizeViewModel
@section Scripts
    {
    <script>
        const fields = document.querySelectorAll(".input-field");
        fields.forEach((field, index) => {
            const input = field.querySelector("input");
            const label = field.querySelector("label");
            input.addEventListener("focus", () => { label.classList.add("active") });
            input.addEventListener("blur", () => { if (!input.value) label.classList.remove("active") });
        });
    </script>
}
<div class="row">
    <div class="col s12 m6 offset-m3">
        <div class="col s12">
            <div class="card">
                <div class="card-content">
                    <h5>Log in with your external account</h5>
                </div>
                <div class="card-action">
                    @if (!Model.IdProviders.Any())
                    {
                        <p>There is no external authentication services configured</p>
                    }
                    else
                    {
                        using (Html.BeginForm("ExternalLogin", "Authenticate"))
                        {
                            foreach (var loginProvider in Model.IdProviders)
                            {
                                <button type="submit" class="waves-effect waves-light btn blue darken-3" id="@loginProvider.AuthenticationScheme" name="provider" value="@loginProvider.AuthenticationScheme" title="Log in using your @loginProvider.AuthenticationScheme account">@loginProvider.DisplayName</button>
                            }
                        }
                    }
                </div>
            </div>
        </div>
        <div class="col s12">
            <div class="card">
                <div class="card-content">
                    <h5>Log in with your local account</h5>
                </div>
                <div class="card-action">
                    <div class="row">

                        <div class="col s12">@Html.ValidationMessage("invalid_credentials")</div>
                        <form class="col s12" name="form" enctype="application/x-www-form-urlencoded" method="POST" action="@Url.Action("LocalLogin")">
                            <div class="row">
                                <div class="input-field col s12">
                                    @if (loginState != null && loginState.Errors.Any())
                                    {
                                        <i class="material-icons prefix">account_circle</i>
                                        <input id="login" name="Login" type="text" class="invalid" />
                                        <label for="login">Username</label>
                                        <span class="helper-text">@string.Join(",", loginState.Errors.Select(e => e.ErrorMessage))</span>
                                    }
                                    else
                                    {
                                        <i class="material-icons prefix">account_circle</i>
                                        <input id="login" name="Login" type="text" />
                                        <label for="login">Username</label>
                                    }
                                </div>
                                <div class="input-field col s12">
                                    @if (passwordState != null && passwordState.Errors.Any())
                                    {
                                        <i class="material-icons prefix">lock</i>
                                        <input id="password" class="invalid" name="Password" type="password" />
                                        <label for="password">Password</label>
                                        <span class="helper-text">@string.Join(",", passwordState.Errors.Select(e => e.ErrorMessage))</span>
                                    }
                                    else
                                    {
                                        <i class="material-icons prefix">lock</i>
                                        <input id="password" name="Password" type="password" />
                                        <label for="password">Password</label>
                                    }
                                </div>
                            </div>
                            <div class="col s12 m6">
                                <label>
                                    <input type="checkbox" name="IsChecked" id="IsChecked" class="filled-in blue-text text-darken-3" />
                                    <span for="IsChecked">Remember me</span>
                                </label>
                            </div>
                            <div class="col s12 m6">
                                <button type="submit" class="waves-effect waves-light btn blue darken-3 right">Log In</button>
                            </div>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
